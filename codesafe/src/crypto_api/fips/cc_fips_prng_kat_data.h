/*
 * Copyright (c) 2001-2019, Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause OR Arm's non-OSI source license
 *
 */

#ifndef  _CC_FIPS_PRNG_KAT_DATA_H
#define  _CC_FIPS_PRNG_KAT_DATA_H

/*
 DRBG test vectors from:
 https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/

# CAVS 14.3
# DRBG800-90A information for "drbg_pr"
# Generated on Tue Apr 02 15:42:28 2013
# c1d8e6d3dfc225eb8d36c44443eccd70663139fd839b1dc32e87ead6db998b3e3967e400f8866e2c23a0b3e96f00cce25b9a79f27774cb32ac3d5da84015594e

# CTR_DRBG options: ... :: AES-256 use df :: ... :: AES-256 no df

[AES-256 use df]
[PredictionResistance = True]
[EntropyInputLen = 256]
[NonceLen = 128]
[PersonalizationStringLen = 256]
[AdditionalInputLen = 0/256]
[ReturnedBitsLen = 512]

*/

/*  Without Additional data
COUNT = 0
EntropyInput = ca58fdf2b977cb49d4e05be23950d98a6ab3c52fdf74d5858fd1ba64547bdb1e
Nonce = c5ea24c0fa0c90150920924232364545
PersonalizationString = 5a7095e98140523391537e75d6199d1ead0dc6a7de6c1fe0ea1833a87e0620e9
AdditionalInput =
EntropyInputPR = 7d20766bcfa215c82f9fbc883f80d12cb716d1809ee1c9b3881b2145efa17fce
AdditionalInput =
EntropyInputPR = c89235552ad91d8e1238ac014e3818769cf2b6d413b62c77c0e7e60c474495be
ReturnedBits = ce2fdbb6d9b7398504c5c042c231c61d9b5a59f87e0dcc627b65115510eb9e3da4fb1c6a18c074dbdde702236321d039f9a7c452843b4940722bb06c9cdbc343
*/

static const uint8_t  fipsPrng256NoAddEntropyInput[] = {
0xca, 0x58, 0xfd, 0xf2, 0xb9, 0x77, 0xcb, 0x49, 0xd4, 0xe0, 0x5b, 0xe2, 0x39, 0x50, 0xd9, 0x8a,
0x6a, 0xb3, 0xc5, 0x2f, 0xdf, 0x74, 0xd5, 0x85, 0x8f, 0xd1, 0xba, 0x64, 0x54, 0x7b, 0xdb, 0x1e
};

static const uint8_t  fipsPrng256NoAddNonce[] = {
0xc5, 0xea, 0x24, 0xc0, 0xfa, 0x0c, 0x90, 0x15, 0x09, 0x20, 0x92, 0x42, 0x32, 0x36, 0x45, 0x45
};

static const uint8_t  fipsPrng256NoAddPersonalStr[] = {
0x5a, 0x70, 0x95, 0xe9, 0x81, 0x40, 0x52, 0x33, 0x91, 0x53, 0x7e, 0x75, 0xd6, 0x19, 0x9d, 0x1e,
0xad, 0x0d, 0xc6, 0xa7, 0xde, 0x6c, 0x1f, 0xe0, 0xea, 0x18, 0x33, 0xa8, 0x7e, 0x06, 0x20, 0xe9
};

static const uint8_t  fipsPrng256NoAddEntropyInPR1[] = {
0x7d, 0x20, 0x76, 0x6b, 0xcf, 0xa2, 0x15, 0xc8, 0x2f, 0x9f, 0xbc, 0x88, 0x3f, 0x80, 0xd1, 0x2c,
0xb7, 0x16, 0xd1, 0x80, 0x9e, 0xe1, 0xc9, 0xb3, 0x88, 0x1b, 0x21, 0x45, 0xef, 0xa1, 0x7f, 0xce
};

static const uint8_t  fipsPrng256NoAddEntropyInPR2[] = {
0xc8, 0x92, 0x35, 0x55, 0x2a, 0xd9, 0x1d, 0x8e, 0x12, 0x38, 0xac, 0x01, 0x4e, 0x38, 0x18, 0x76,
0x9c, 0xf2, 0xb6, 0xd4, 0x13, 0xb6, 0x2c, 0x77, 0xc0, 0xe7, 0xe6, 0x0c, 0x47, 0x44, 0x95, 0xbe
};

static const uint8_t  fipsPrng256NoAddExpVector[] = {
0xce, 0x2f, 0xdb, 0xb6, 0xd9, 0xb7, 0x39, 0x85, 0x04, 0xc5, 0xc0, 0x42, 0xc2, 0x31, 0xc6, 0x1d,
0x9b, 0x5a, 0x59, 0xf8, 0x7e, 0x0d, 0xcc, 0x62, 0x7b, 0x65, 0x11, 0x55, 0x10, 0xeb, 0x9e, 0x3d,
0xa4, 0xfb, 0x1c, 0x6a, 0x18, 0xc0, 0x74, 0xdb, 0xdd, 0xe7, 0x02, 0x23, 0x63, 0x21, 0xd0, 0x39,
0xf9, 0xa7, 0xc4, 0x52, 0x84, 0x3b, 0x49, 0x40, 0x72, 0x2b, 0xb0, 0x6c, 0x9c, 0xdb, 0xc3, 0x43
};



/*  With Additional data
COUNT = 0
EntropyInput = 534346a3e0baa65d7a51871b6d633a6f1efa9ff55dfde3212c95029adf2387d9
Nonce = 0cbe99821509975d824fd826c47d2abc
PersonalizationString = 020d7340569e68d992e6e8ddfbead9f993c74d971e4339fe91074f87e9d7d777
AdditionalInput = f41040eff2a7010287c2a76d7867a66e61299be1e1247a6b22a64b829ada8624
EntropyInputPR = 286091709d2e91bfef6654b8449d5e5564b6c2fe1f3e4e6e59fe776461bfb0dc
AdditionalInput = 94efe68e2185646a17bb8a83268142a7b7a02786c1ee90ab8f7399ccf543de26
EntropyInputPR = e68e127b2e5b9d6539c26f7e78bec13314e37febdb7105d1d65f0bde23c87d38
ReturnedBits = da6389d151e3b2b332fbcc02b2cc5af4f69835e9fbbe19130f91cbf30a3c24580ebfb4311b3487e9d6a61de9dc2842c107152158b0e75a932c38e5b8ddff10e6
*/

static const uint8_t  fipsPrng256WithAddEntropyInput[] = {
0x53, 0x43, 0x46, 0xa3, 0xe0, 0xba, 0xa6, 0x5d, 0x7a, 0x51, 0x87, 0x1b, 0x6d, 0x63, 0x3a, 0x6f,
0x1e, 0xfa, 0x9f, 0xf5, 0x5d, 0xfd, 0xe3, 0x21, 0x2c, 0x95, 0x02, 0x9a, 0xdf, 0x23, 0x87, 0xd9
};

static const uint8_t  fipsPrng256WithAddNonce[] = {
0x0c, 0xbe, 0x99, 0x82, 0x15, 0x09, 0x97, 0x5d, 0x82, 0x4f, 0xd8, 0x26, 0xc4, 0x7d, 0x2a, 0xbc
};

static const uint8_t  fipsPrng256WithAddPersonalStr[] = {
0x02, 0x0d, 0x73, 0x40, 0x56, 0x9e, 0x68, 0xd9, 0x92, 0xe6, 0xe8, 0xdd, 0xfb, 0xea, 0xd9, 0xf9,
0x93, 0xc7, 0x4d, 0x97, 0x1e, 0x43, 0x39, 0xfe, 0x91, 0x07, 0x4f, 0x87, 0xe9, 0xd7, 0xd7, 0x77
};

static const uint8_t  fipsPrng256WithAddEntropyInPR1[] = {
0x28, 0x60, 0x91, 0x70, 0x9d, 0x2e, 0x91, 0xbf, 0xef, 0x66, 0x54, 0xb8, 0x44, 0x9d, 0x5e, 0x55,
0x64, 0xb6, 0xc2, 0xfe, 0x1f, 0x3e, 0x4e, 0x6e, 0x59, 0xfe, 0x77, 0x64, 0x61, 0xbf, 0xb0, 0xdc
};

static const uint8_t  fipsPrng256WithAddEntropyInPR2[] = {
0xe6, 0x8e, 0x12, 0x7b, 0x2e, 0x5b, 0x9d, 0x65, 0x39, 0xc2, 0x6f, 0x7e, 0x78, 0xbe, 0xc1, 0x33,
0x14, 0xe3, 0x7f, 0xeb, 0xdb, 0x71, 0x05, 0xd1, 0xd6, 0x5f, 0x0b, 0xde, 0x23, 0xc8, 0x7d, 0x38
};

static const uint8_t  fipsPrng256WithAddAdditionalInput1[] = {
0xf4, 0x10, 0x40, 0xef, 0xf2, 0xa7, 0x01, 0x02, 0x87, 0xc2, 0xa7, 0x6d, 0x78, 0x67, 0xa6, 0x6e,
0x61, 0x29, 0x9b, 0xe1, 0xe1, 0x24, 0x7a, 0x6b, 0x22, 0xa6, 0x4b, 0x82, 0x9a, 0xda, 0x86, 0x24
};

static const uint8_t  fipsPrng256WithAddAdditionalInput2[] = {
0x94, 0xef, 0xe6, 0x8e, 0x21, 0x85, 0x64, 0x6a, 0x17, 0xbb, 0x8a, 0x83, 0x26, 0x81, 0x42, 0xa7,
0xb7, 0xa0, 0x27, 0x86, 0xc1, 0xee, 0x90, 0xab, 0x8f, 0x73, 0x99, 0xcc, 0xf5, 0x43, 0xde, 0x26
};

static const uint8_t  fipsPrng256WithAddExpVector[] = {
0xda, 0x63, 0x89, 0xd1, 0x51, 0xe3, 0xb2, 0xb3, 0x32, 0xfb, 0xcc, 0x02, 0xb2, 0xcc, 0x5a, 0xf4,
0xf6, 0x98, 0x35, 0xe9, 0xfb, 0xbe, 0x19, 0x13, 0x0f, 0x91, 0xcb, 0xf3, 0x0a, 0x3c, 0x24, 0x58,
0x0e, 0xbf, 0xb4, 0x31, 0x1b, 0x34, 0x87, 0xe9, 0xd6, 0xa6, 0x1d, 0xe9, 0xdc, 0x28, 0x42, 0xc1,
0x07, 0x15, 0x21, 0x58, 0xb0, 0xe7, 0x5a, 0x93, 0x2c, 0x38, 0xe5, 0xb8, 0xdd, 0xff, 0x10, 0xe6
};


#endif // _CC_FIPS_PRNG_KAT_DATA_H
